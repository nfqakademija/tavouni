# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    app_bundle:service:listener:
        class: AppBundle\Listener\LoadDataListener
        tags:
                - {name: 'kernel.event_listener', event: 'fullcalendar.set_data', method: loadData }

    AppBundle\Repository\LectureDateRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\LectureDate

    AppBundle\Repository\PostRepository:
            factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
            arguments:
                - AppBundle\Entity\Post

    security.authentication.success_handler:
        class:  AppBundle\Authentication\AuthenticationSuccessHandler
        arguments:  ["@security.http_utils", {}]
        tags:
            - { name: 'monolog.logger', channel: 'security' }

    AppBundle\Repository\LectureRepository:
                factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                arguments:
                    - AppBundle\Entity\Lecture

    AppBundle\Repository\GradeRepository:
                    factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                    arguments:
                        - AppBundle\Entity\Grade

    AppBundle\Repository\AssignmentRepository:
                        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                        arguments:
                            - AppBundle\Entity\Assignment

    AppBundle\Repository\RoomRepository:
                                factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                                arguments:
                                    - AppBundle\Entity\Room

    AppBundle\Repository\AssignmentEventRepository:
                                    factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                                    arguments:
                                        - AppBundle\Entity\AssignmentEvent
    AppBundle\Repository\StudentRepository:
                                        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
                                        arguments:
                                            - AppBundle\Entity\Student


    Faker\Factory: ~

    Faker\Generator:
        factory: 'Faker\Factory:create'
        public: true